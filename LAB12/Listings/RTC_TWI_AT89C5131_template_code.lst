C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE RTC_TWI_AT89C5131_TEMPLATE_CODE
OBJECT MODULE PLACED IN .\Objects\RTC_TWI_AT89C5131_template_code.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE RTC_TWI_AT89C5131_template_code.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTE
                    -XTEND PRINT(.\Listings\RTC_TWI_AT89C5131_template_code.lst) TABS(2) OBJECT(.\Objects\RTC_TWI_AT89C5131_template_code.obj
                    -)

line level    source

   1          /*
   2          We set Date and Time in RTC IC and read the same from it and Display it on LCD
   3          You can change Date and Time according to your own need and observe auto-updation of date and time by RTC.
   4          
   5          DS1307 works in 100kHz mode by default.
   6          
   7          We are using AT89C5131A in MASTER Transmit/Recieve mode ONLY !, to use the device in Slave mode refer the 
             -Datasheet.
   8          
   9          Check the connections of SDA/SCL lines and Donot forget to give 5V to DS1307 apart from 3V battery back-up
             -.
  10          
  11          Students are encouraged to use this code fragment, modify, and craft out other possibilities beyond what t
             -hey understand from this code.
  12          */
  13          
  14          #include "at89c5131.h"
  15          #include "math.h"
  16          #include<stdio.h>
  17          #include<string.h>
  18          
  19          #define LCD_data  P2                // LCD Data port
  20          
  21          //------ TWI register Definition ---------
  22          
  23          // Refer page 102 of the 89c5131 Datasheet to fill-in the values of following variables
  24          
  25          #define SSIE_enable 0x40
  26          #define start_comm 0x20
  27          #define stop_comm 0xD1
  28          #define bitrate 0x81
  29          
  30          #define clear_TWI_start_stop_interrupt 0xC7
  31          #define clear_TWI_stop_interrupt 0xE7
  32          
  33          #define send_Ack 0xC5
  34          #define send_Nack 0xC3
  35          #define read_mode 0x01
  36          #define write_mode 0x00
  37          
  38          // ------ RTC Register Definition ------
  39          
  40          #define slave_add 0xD0
  41          #define clear_ext_interrupt 0xF7
  42          #define seconds 0x00
  43          #define minutes 0x15
  44          #define hours 0x63
  45          #define day 0x03
  46          #define date 0x05
  47          #define month 0x11
  48          #define year 0x19
  49          #define SQWE 0X10
  50          
C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 2   

  51          sbit SDA = P4^1;    //assign pins
  52          sbit SCL = P4^0;    //assign pins
  53          
  54          sbit LCD_rs = P0^0;                 // LCD Register Select
  55          sbit LCD_rw = P0^1;                 // LCD Read/Write
  56          sbit LCD_en = P0^2;                 // LCD Enable
  57          
  58          sbit LCD_busy = P2^7;               // LCD Busy Flag
  59          
  60          //---------- LCD Function Definition ----------
  61          void LCD_Init();
  62          void LCD_DataWrite(char dat);
  63          void LCD_CmdWrite(char cmd);
  64          void LCD_StringWrite(unsigned char *str);
  65          void LCD_Ready(void);
  66          void sdelay(int delay);
  67          
  68          //----------- TWI Function Definition ----------
  69          
  70          void TWI_init(void);
  71          void Interrupt_init(void);
  72          void start(void);
  73          void Stop(void);
  74          void Ack(void);
  75          void Nack(void);
  76          void display_data(void);
  77          void write_one_time(void);
  78          void read_one_time(void);
  79          
  80          unsigned char conf[8] = {seconds,minutes,hours,day,date,month,year,SQWE}; // for reg 0x01 and 0x02
  81          unsigned char mode[2] = {(slave_add | write_mode),(slave_add | read_mode)};
  82          unsigned char Data[7],count=0,read,ext_int=0,high_nibble,low_nibble;
  83          
  84          char MSB_read,LSB_read,flag;
  85          int conf_index=0,mode_index=0,Data_index=0;
  86          int clk,AM,PM;
  87          char check;
  88          
  89          /////////////////////////////////////////////////      Initialize Two wired Communication     ////////////
             -//////////////
  90          
  91          void TWI_init(void)
  92          {
  93   1          SDA =1;                   // set port lines
  94   1          SCL =1;
  95   1          SSCON &= 0x00;                // clear SSCON
  96   1          SSCON = SSCON | bitrate;            // set bit frequency to 100kHz
  97   1          SSCON = SSCON | SSIE_enable;          // synchronous serial enable bit
  98   1          SSCON = SSCON & clear_TWI_start_stop_interrupt;     // clear start,stop and serial interrupt fla
  99   1      }
 100          
 101          /////////////////////////////////////////////////     Interrupt handeler for Two wired Communication     /
             -/////////////////////////
 102          
 103          void Interrupt_subroutine () interrupt 8 
 104          {
 105   1        switch(SSCS)
 106   1        {
 107   2          case 0x08: /////// Start has been recieved ///////
 108   2      
 109   2            SSDAT = mode[mode_index++];       // SSDAT = write slave address + write mode
 110   2            SSCON &= clear_TWI_stop_interrupt;    // clear stop flag and Interrupt flag
C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 3   

 111   2            break;
 112   2      
 113   2          case 0x10: /////// Repeat start has been recieved ///////
 114   2      
 115   2            SSDAT = mode[mode_index++];       // SSDAT = write slave address + read mode
 116   2            SSCON &= clear_TWI_stop_interrupt;      // clear interrupt and stop flag 
 117   2            break;
 118   2      
 119   2          case 0x20 : /////// SLA+W has been transmitted NOT ACK has been received  /////
 120   2      
 121   2            SSCON = stop_comm; // stop condition will be transmitted and interrupt flag cleared
 122   2            break;
 123   2      
 124   2          case 0x18: /////// Slave add + write mode Ack is recieved ///////
 125   2      
 126   2            SSDAT = 0x00;               // SSDAT = write register address byte (set pointer address to 00h)
 127   2            SSCON &= clear_TWI_start_stop_interrupt; // clear start stop interrupt
 128   2            break;
 129   2      
 130   2          case 0x28: /////// Data written & Ack is recieved ///////
 131   2      
 132   2            if (!read)                // enter when pointer address set to write
 133   2            { 
 134   3              if(conf_index<8)
 135   3              {
 136   4                SSDAT=conf[conf_index++];   // SSDAT = write next data byte
 137   4                SSCON &= clear_TWI_start_stop_interrupt; 
 138   4              } 
 139   3              else
 140   3              {
 141   4                SSCON = stop_comm;        // stop condition will be transmitted and interrupt flag cleared 
 142   4                flag=1;             // flag set to indicate write has been done
 143   4              }
 144   3            }
 145   2            else
 146   2            {
 147   3              SSCON = stop_comm;                 // stop condition will be transmitted and interrupt flag cleared
 148   3              flag=1;                // flag set to indicate write portion during read is complete
 149   3            }
 150   2            break;
 151   2      
 152   2          case 0X30 : /////// data byte has been transmitted and NOT ACK has been received ///////
 153   2      
 154   2            SSCON = stop_comm;             // stop condition will be transmitted and interrupt flag cleared
 155   2            break;
 156   2      
 157   2      
 158   2          case 0X40 : /////// SLA+R has been transmitted ACK has been transmitted ///////
 159   2      
 160   2            SSCON = send_Ack;                          // data byte will be received and ACK will be returned
 161   2            break;                   //clear start flag, stop flag and Interrupt flag
 162   2      
 163   2          case 0x48: /////// Slave add + Read mode Nack is recieved ///////
 164   2      
 165   2            SSCON = stop_comm; // stop condition will be transmitted and interrupt flag cleared
 166   2            break;
 167   2      
 168   2          case 0x50: /////// Data Read & Ack is recieved ///////
 169   2      
 170   2            if(Data_index < 5)
 171   2            {       
 172   3              Data[Data_index++]=SSDAT;
C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 4   

 173   3              SSCON = send_Ack; // data byte will be received and ACK will be returned
 174   3            }
 175   2            else
 176   2            {
 177   3              Data[Data_index++]=SSDAT;
 178   3              SSCON &= send_Nack; // data byte will be received and NOT ACK will be returned as next data is last da
             -ta(years).
 179   3            }
 180   2            break;
 181   2      
 182   2      
 183   2      
 184   2          case 0X58 : // data byte has been received,NOT ACK has been returned
 185   2      
 186   2            Data[Data_index++]=SSDAT; // read years register
 187   2            Data_index = 0;         
 188   2            SSCON = stop_comm; // stop condition will be transmitted and interrupt flag cleared
 189   2            flag = 1;
 190   2            break;
 191   2            
 192   2          }   
 193   1      }
 194          
 195          /////////////////////////////////////////////////     Initialize External Interrupt and global Interrupt  
             -   //////////////////////////
 196          
 197          void Interrupt_init(void)
 198          {
 199   1          //  Make P3.3 as Input to receive External Interrupt
 200   1          IEN0|=0x84;   // Enable all interrupts/Serialport Int/External Int 0
 201   1          IPL0|=0x04;   // Set the External interrupt priority as highest
 202   1          IPH0|=0x04;
 203   1          // Enable TWI interrupt - Refer IEN1 register
 204   1          IEN1 |= 0x02;
 205   1          IPL1 =0x00;   // Set the TWI interrupt priority as second highest
 206   1          IPH1 =0x02;
 207   1          // External interrupt falling edge triggered - Refer TCON register
 208   1          IT1 = 1;
 209   1      }
 210          
 211          
 212          /////////////////////////////////////////////////     External Interrupt Handler Subroutine     //////////
             -////////////////
 213          
 214          void Ext_interrupt_subroutine(void) interrupt 2 // Interrupt vector location for external interrupt
 215          {
 216   1          ext_int = 1;              // Instead of doing everything in interrupt, we set a flag and do everything in main(
             -)
 217   1          TCON &= clear_ext_interrupt;      // clear external interrupt on INT1 (P3.3)
 218   1      }
 219          
 220          /////////////////////////////////////////////////     Send Start on Two Wire Interface     ///////////////
             -///////////
 221          
 222          void start(void)
 223          {
 224   1          SSCON |=start_comm;
 225   1      }
 226          
 227          /////////////////////////////////////////////////     LCD Initialization     //////////////////////////
 228          
 229          void LCD_Init()
C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 5   

 230          {
 231   1          LCD_CmdWrite(0x38);     // LCD 2lines, 5*7 matrix
 232   1          sdelay(100);
 233   1          LCD_CmdWrite(0x0E);     // Display ON cursor ON  Blinking off
 234   1          sdelay(100);
 235   1          LCD_CmdWrite(0x01);     // Clear the LCD
 236   1          sdelay(100);
 237   1          LCD_CmdWrite(0x80);     // Cursor to First line First Position
 238   1          sdelay(100);
 239   1      }
 240          
 241          /////////////////////////////////////////////////     LCD Busy Bit Check     //////////////////////////
 242          
 243          void LCD_Ready()
 244          {
 245   1          LCD_data = 0xFF;
 246   1          LCD_rs = 0;
 247   1          LCD_rw = 1;
 248   1          LCD_en = 0;
 249   1          sdelay(5);
 250   1          LCD_en = 1;
 251   1          while(LCD_busy == 1)
 252   1          {
 253   2            LCD_en = 0;
 254   2            LCD_en = 1;
 255   2          }
 256   1          LCD_en = 0;
 257   1      }
 258          
 259          /////////////////////////////////////////////////     LCD Command Write     //////////////////////////
 260          
 261          void LCD_CmdWrite(char cmd)
 262          {
 263   1          LCD_Ready();
 264   1          LCD_data=cmd;           // Send the command to LCD
 265   1          LCD_rs=0;               // Select the Command Register by pulling LCD_rs LOW
 266   1          LCD_rw=0;               // Select the Write Operation  by pulling RW LOW
 267   1          LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 268   1          sdelay(1);
 269   1          LCD_en=0;
 270   1          sdelay(1);
 271   1      }
 272          
 273          /////////////////////////////////////////////////     LCD Character Write     //////////////////////////
 274          
 275          void LCD_DataWrite( char dat)
 276          {
 277   1          LCD_Ready();
 278   1          LCD_data=dat;           // Send the data to LCD
 279   1          LCD_rs=1;               // Select the Data Register by pulling LCD_rs HIGH
 280   1          LCD_rw=0;               // Select the Write Operation by pulling RW LOW
 281   1          LCD_en=1;               // Send a High-to-Low Pusle at Enable Pin
 282   1          sdelay(1);
 283   1          LCD_en=0;
 284   1          sdelay(1);
 285   1      }
 286          /////////////////////  Function to split the string into individual characters and call the LCD_DataWrite 
             -function   ////////////////
 287          
 288          void LCD_StringWrite(unsigned char *str)
 289          {
 290   1          int i=0;
C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 6   

 291   1          while(str[i]!=0)
 292   1          {
 293   2              LCD_DataWrite(str[i]);
 294   2              i++;
 295   2          }
 296   1          return;
 297   1      }
 298          
 299          /////////////////////////////////////////////////     Delay loop     //////////////////////////
 300          
 301          void sdelay(int delay)
 302          {
 303   1        char d=0;
 304   1        while(delay>0)
 305   1        {
 306   2          for(d=0;d<5;d++);
 307   2          delay--;
 308   2        }
 309   1      }
 310          
 311          ///////////////////////////////////////////////// BCD to ASCII ///////////////////////////////////////////
             -/////////
 312          
 313          // Since we read from DS1307(BCD numbers) and display it to LCD (ASCII Values)
 314          void BCD_ASCII(unsigned char value)
 315          {
 316   1        // write the function to covert the BCD values to ASCII
 317   1        LCD_DataWrite((value>>4)+48);
 318   1        LCD_DataWrite((value%16)+48);
 319   1      }
 320          
 321          ///////////////////////////////////////////////// Display date and time //////////////////////////////////
             -////////
 322          
 323          //Display date and time on LCD Display
 324          void Disp_time(void)
 325          {
 326   1        // Data register contains all data read from the slave device
 327   1        // 1ine 1-format:   Time HH:MM:SS AM (or) Time HH:MM:SS PM [(or) Time HH:MM:SS Hr - in case of 24 hr forma
             -t]
 328   1        BCD_ASCII(Data[2]&0x1F);
 329   1        LCD_DataWrite(':');
 330   1        BCD_ASCII(Data[1]);
 331   1        LCD_DataWrite(':');
 332   1        BCD_ASCII(Data[0]&0x7F);
 333   1        if(Data[2]&0x20)
 334   1          LCD_StringWrite(" PM");
 335   1        else
 336   1          LCD_StringWrite(" AM");
 337   1      }
 338          
 339          
 340          void Disp_date(void)
 341          {
 342   1        // Data register contains all data read from the slave device
 343   1        // 1ine 2-format:   Date WW DD/MM/YY
 344   1        BCD_ASCII(Data[3]);
 345   1        LCD_DataWrite(' ');
 346   1        BCD_ASCII(Data[4]);
 347   1        LCD_DataWrite('/');
 348   1        BCD_ASCII(Data[5]);
 349   1        LCD_DataWrite('/');
C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 7   

 350   1        BCD_ASCII(Data[6]);
 351   1      }
 352          /////////////////////////////////////////////////     Display Data    //////////////////////////
 353          
 354          void display_data(void)
 355          {
 356   1        LCD_CmdWrite(0x85);
 357   1        Disp_time();
 358   1        LCD_CmdWrite(0xC5);
 359   1        Disp_date();
 360   1      }
 361          
 362          
 363          /////////////////////////////////////////////////     Write_one_time     //////////////////////////
 364          
 365          void write_one_time()
 366          {
 367   1          flag=0;
 368   1          mode_index = 0;
 369   1          conf_index = 0;
 370   1          read=0;
 371   1          start();
 372   1          while(!flag);
 373   1      }
 374          /////////////////////////////////////////////////     Read_one_time     //////////////////////////
 375          
 376          void read_one_time()
 377          {
 378   1          flag=0;
 379   1          mode_index = 0;
 380   1          Data_index = 0;
 381   1          read=1;
 382   1          start();
 383   1          while(!flag);
 384   1          flag = 0;
 385   1          start();
 386   1          while(!flag);
 387   1      }
 388          
 389          /////////////////////////////////////////////////     Main Programme     //////////////////////////
 390          // Understand the main program
 391          
 392          void main(void)
 393          {
 394   1      
 395   1          P2 = 0x00;          // Make Port 2 output for LCD
 396   1          LCD_Init();         // Initialize LCD
 397   1          Interrupt_init();     // Initialize Interrupts for both I2C/TWI and External Interrupt INT1 connected to P
             -3.3
 398   1          TWI_init();
 399   1      
 400   1          read_one_time();
 401   1          if(Data[0]&0x80)
 402   1            write_one_time();     // Write the Data to slave device
 403   1          LCD_CmdWrite(0x80);
 404   1          LCD_StringWrite("Time ");
 405   1          LCD_CmdWrite(0xC0);
 406   1          LCD_StringWrite("Date ");
 407   1      
 408   1          while(1)
 409   1          {
 410   2            if(ext_int)
C51 COMPILER V9.60.0.0   RTC_TWI_AT89C5131_TEMPLATE_CODE                                   11/08/2019 15:44:39 PAGE 8   

 411   2            {
 412   3              ext_int=0;
 413   3              // Read the Data from slave device
 414   3              read_one_time();
 415   3              // Display the recieved data
 416   3              display_data();
 417   3            }
 418   2          }
 419   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    737    ----
   CONSTANT SIZE    =     20    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     38       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
